<?xml version="1.0" encoding="UTF-8"?>

<!--
  Bidding application
  Receives a POSTed list of bids in through AuctionService
  Enriches each bid then scans the final bids to locate the highest bidder
  The highest bidder is returned back to the client

  Running the application:
    - start two mule instances in a cluster, each with a unique http.port
    - POST bid data to http:listener; bid example can be found in src/main/resources

  This application can be used to demo:
    - impacts of processing-strategy with a VM profiler.
    - how clusters / CH handles distributing load with VM endpoints
    - impact of using a cluster-aware cache in on-prem
    - asynchronous processing of a synchronous http request
-->

<mule 
  xmlns:http="http://www.mulesoft.org/schema/mule/http" 
  xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" 
  xmlns:spring="http://www.springframework.org/schema/beans" 
  xmlns="http://www.mulesoft.org/schema/mule/core"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:vm="http://www.mulesoft.org/schema/mule/vm"
  xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
  http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/current/mule-vm.xsd
  http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
  http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd">

  <http:listener-config name="HTTP_Listener_Configuration" host="0.0.0.0" port="${http.port}" doc:name="HTTP Listener Configuration"/>

  <!-- allow for higher parrallel execution -->
  <queued-asynchronous-processing-strategy name="QueuedHighThroughput" maxThreads="80" minThreads="20" threadTTL="5000" doc:name="Queued Asynchronous Processing Strategy"/>

  <!-- receive bids and block until asynchronous flows call back to this flow in vm-backchannel -->
  <flow name="AuctionService">
    <http:listener config-ref="HTTP_Listener_Configuration" path="/auction" allowedMethods="POST" doc:name="HTTP"/>
    <object-to-string-transformer doc:name="Object to String"/>
    <request-reply doc:name="Request-Reply">
      <vm:outbound-endpoint exchange-pattern="one-way" path="split" doc:name="split"/>
      <vm:inbound-endpoint exchange-pattern="one-way" path="auction.service" doc:name="auction.service"/>
    </request-reply>
    <set-payload value="#['{ &quot;complete&quot; : &quot;' + payload + '&quot; }']" doc:name="Set Payload"/>
  </flow>

  <!-- create and queue a new mule message for each bid -->
  <flow name="splitBids">
    <vm:inbound-endpoint exchange-pattern="one-way" path="split" doc:name="split"/>
    <splitter expression="#[groovy:payload.readLines()]" doc:name="Splitter"/>
    <vm:outbound-endpoint exchange-pattern="one-way" path="process" doc:name="process"/>
  </flow>

  <!-- add user information (enrich) bids; locate the highest bidder; respond back to AuctionService-->
  <flow name="processBids" processingStrategy="QueuedHighThroughput">
    <vm:inbound-endpoint exchange-pattern="one-way" path="process" doc:name="process"/>
    <component class="com.mulesoft.EnricherAuctionComponent" doc:name="EnrichBids Java Component"/>
    <collection-aggregator timeout="100000" failOnTimeout="true" doc:name="Collection Aggregator"/>
    <component class="com.mulesoft.HighestBidderAuctionComponent" doc:name="Highest Bidder Java Component"/>
    <vm:outbound-endpoint exchange-pattern="one-way" path="auction.service" doc:name="VM: auction.service"/>
  </flow>
    
</mule>
